create database PrototipoEcommerce;
use PrototipoEcommerce;

create table Usuario(
idUsuario int auto_increment primary key,
correo varchar(60) unique not null,
userPassword varchar(100) not null,
nombre varchar(50) not null,
apellido varchar(50) not null,
fechaNacimiento date not null,
telefono varchar(30) not null,
tipo char(1) not null default('c'),
bajaLogica boolean default(false) not null, 
constraint CK_TipoUsuario check(tipo= 'a' or tipo= 'c')
);

create table Direccion (
idDireccion int auto_increment,
idUsuario int,
calle varchar(100) not null,
departamento varchar(100) not null,
ciudad varchar(100) not null,
numeroDeCasa varchar(20),
numeroDeApartamento varchar(20),
referencia text,
codigoPostal varchar(20) not null,
constraint FK_Direccion_Usuario foreign key(idUsuario) references Usuario(idUsuario) on delete cascade,
primary key(idDireccion, idUsuario)
);

create table Categoria(
idCategoria int auto_increment primary key,
nombre varchar(30) unique not null
);

create table Marca(
idMarca int auto_increment primary key,
nombre varchar(50) unique not null
);

create table FormaDePago(
idFormaDePago int auto_increment primary key,
formaDePago varchar(50) not null,
monto decimal(10,2) not null
);

create table PagoOnline(
idPagoOnline int primary key,
cantidadDeCuotas numeric(2) not null,
constraint FK_PagoOnline_FormaDePago foreign key(idPagoOnline) references FormaDePago(idFormaDePago) on delete cascade
);

create table Efectivo(
idEfectivo int primary key,
constraint FK_Efectivo_FormaDePago foreign key(idEfectivo) references FormaDePago(idFormaDePago) on delete cascade
);

create table Transferencia(
idTransferencia int primary key,
constraint FK_Transferencia_FormaDePago foreign key(idTransferencia) references FormaDePago(idFormaDePago) on delete cascade
);

create table Producto (
idProducto int auto_increment primary key,
nombre varchar(50) not null,
precio decimal(10,2) not null,
talle varchar(10) not null,
stock numeric(4) not null,
estilo varchar(30) not null,
descripcion text
);

create table Calzado (
idCalzado int primary key,
constraint FK_Calzado_Producto foreign key(idCalzado) references Producto(idProducto) on delete cascade
);

create table Vestimenta (
idVestimenta int primary key,
constraint FK_Vestimenta_Producto foreign key(idVestimenta) references Producto(idProducto) on delete cascade
);

create table Accesorio (
idAccesorio int primary key,
constraint FK_Accesorio_Producto foreign key(idAccesorio) references Producto(idProducto) on delete cascade
);

create table Imagen(
idImagen int auto_increment primary key,
idProducto int not null,
titulo varchar(100) unique not null,
URLImagen text not null,
constraint FK_Imagen_Producto foreign key(idProducto) references Producto(idProducto) on delete cascade
);

create table Carrito (
idUsuario int,
idProducto int,
cantidad numeric(4) not null,
constraint FK_Carrito_Usuario foreign key(idUsuario) references Usuario(idUsuario) on delete cascade,
constraint FK_Carrito_Producto foreign key(idProducto) references Producto(idProducto) on delete cascade,
primary key(idUsuario, idProducto)
);

create table Orden(
idOrden int auto_increment primary key,
idUsuario int not null,
idFormaDePago int  not null,
fecha timestamp default(now()) not null,
monto decimal(10,2) not null,
constraint FK_Orden_Usuario foreign key(idUsuario) references Usuario(idUsuario),
constraint FK_Orden_FormaDePago foreign key(idFormaDePago) references FormaDePago(idFormaDePago)
);

create table OrdenDetalle (
idOrden int,
idProducto int,
cantidad numeric(4),
precio decimal(10,2) not null,
constraint FK_OrdenDetalle_Producto foreign key(idProducto) references Producto(idProducto),
primary key(idOrden, idProducto)
);

create table Pago(
idPago int auto_increment primary key,
idUsuario int not null,
idOrden int not null,
fecha Date default(now()) not null,
monto decimal(10,2) not null,
tipo char(1) not null,
constraint FK_Pago_Usuario foreign key(idUsuario) references Usuario(idUsuario),
constraint FK_Pago_Orden foreign key(idOrden) references Orden(idOrden),
constraint CK_TipoPago check(tipo = 't' or tipo = 'c' or tipo = 'd')
);

create table PagoPendiente (
idPagoPendiente int auto_increment primary key,
idOrden int not null,
fechaLimite Date not null,
monto decimal(10,2) not null,
constraint FK_PagoPendiente_Orden foreign key(idOrden) references Orden(idOrden)
);

create table ProductoCategoria (
idProducto int,
idCategoria int,
constraint FK_ProductoCategoria_Producto foreign key(idProducto) references Producto(idProducto) on delete cascade,
constraint FK_ProductoCategoria_Categoria foreign key(idCategoria) references Categoria(idCategoria)on delete cascade,
primary key(idProducto, idCategoria)
);

create table ProductoMarca(
idProducto int,
idMarca int,
constraint FK_ProductoMarca_Producto foreign key(idProducto) references Producto(idProducto) on delete cascade,
constraint FK_ProductoMarca_Marca foreign key(idMarca) references Marca(idMarca)on delete cascade,
primary key(idProducto, idMarca)
);

create table Envio(
idEnvio int auto_increment primary key,
idOrden int,
idDireccion int,
fecha Date not null,
tipo varchar(30) not null,
estado varchar(30) not null,
monto decimal(10,2) not null,
constraint FK_Envio_Orden foreign key(idOrden) references Orden(idOrden) on delete cascade,
constraint FK_Envio_Direccion foreign key(idDireccion) references Direccion(idDireccion)on delete cascade
);


DELIMITER $$
CREATE TRIGGER evaluaFechaNacimiento BEFORE INSERT ON Usuario
FOR EACH ROW
BEGIN
    IF NEW.fechaNacimiento > NOW() THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'La fecha ingresada no es válida';
    END IF;
END 
$$
DELIMITER $$
CREATE TRIGGER evaluaFechaLimite BEFORE INSERT ON PagoPendiente
FOR EACH ROW
BEGIN
    IF NEW.fechaLimite <= NOW() THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'La fecha ingresada no es válida';
    END IF;
END $$